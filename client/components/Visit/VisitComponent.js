// @flow/* eslint-disable global-require */import React from 'react';import PropTypes from 'prop-types';import Page from '../Page/PageComponent';import {Line} from 'react-chartjs-2';import _ from 'lodash';import moment from 'moment';import {Grid, Cell, Card, CardTitle, CardText, CardActions, Button} from 'react-mdl';import DatePicker from 'react-datepicker';import 'react-datepicker/dist/react-datepicker.css';var today = new Date();var lastWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);export default class ProductComponent extends React.Component {    constructor(props) {        super(props)        let visits = this.props.viewer.visits.edges.map((visit) => {            return _.cloneDeep(visit.node);        });        let vsts = _.map(visits, (visit) => {            visit.day = moment(visit.created_at, 'dd MMM D YYYY HH:mm:ss').format('DD-MM-YYYY');            return visit;        });        let ovsts = _.sortBy(vsts, 'day');        let gvsts = _.groupBy(ovsts, 'day');        let chartData = _.map(gvsts, (g) => {            return g.length        });        console.log(chartData);        this.state = {            labels: _.keysIn(gvsts),            chartData: chartData        }    }    static propTypes = {        viewer: PropTypes.object.isRequired,        relay: PropTypes.object.isRequired,    };    prepareData() {//        console.log(this.props.viewer)    }    componentDidMount() {        this.prepareData.call(this)    }    render() {        return (            <Page heading='Visits'>                <DatePicker                    selected={this.state.startDate}                    onChange={this.handleChange}                />                <Line data={{                    labels: this.state.labels,                    datasets: [{                        data: this.state.chartData,                    }],                }}                      options={{                          scales: {                              yAxes: [{                                  ticks: {                                      min: 0                                  }                              }]                          },                          legend: {                              display: false                          },                      }}                />            </Page>        );    }}
input AddCategoryInput {
  title: String!
  view_title: String!
  image: String
  description: String!
  parent: Int
  clientMutationId: String
}

type AddCategoryPayload {
  categoryEdge: CategoryEdge
  viewer: User
  clientMutationId: String
}

input AddFeatureInput {
  name: String!
  description: String!
  url: String!
  clientMutationId: String
}

type AddFeaturePayload {
  featureEdge: FeatureEdge
  viewer: User
  clientMutationId: String
}

input AddProductInput {
  name: String!
  price: Int!
  created_at: String!
  updated_at: String!
  clientMutationId: String
}

type AddProductPayload {
  productEdge: ProductEdge
  viewer: User
  clientMutationId: String
}

input AddUserInput {
  name: String!
  age: Int!
  clientMutationId: String
}

type AddUserPayload {
  userEdge: UserEdge
  viewer: User
  clientMutationId: String
}

# Category of shop and his parent
type Category {
  # The ID of an object
  id: ID!

  # Title of category
  title: String

  # Description of the category
  description: String

  # Title for view element
  view_title: String

  # Image src for category
  image: String

  # Id of parent category
  parent: Int

  # Subcategories for category
  children: String

  # Date, when category created
  createdAt: String

  # Date, when category updated
  updatedAt: String
}

# A connection to a list of items.
type CategoryConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CategoryEdge]
}

# An edge in a connection.
type CategoryEdge {
  # The item at the end of the edge
  node: Category

  # A cursor for use in pagination
  cursor: String!
}

input DeleteCategoryInput {
  name: String!
  price: Int!
  created_at: String!
  updated_at: String!
  clientMutationId: String
}

type DeleteCategoryPayload {
  categoryEdge: CategoryEdge
  removeCategoryId: CategoryEdge
  viewer: User
  clientMutationId: String
}

input DeleteProductInput {
  id: String!
  clientMutationId: String
}

type DeleteProductPayload {
  productEdge: ProductEdge
  viewer: User
  clientMutationId: String
}

# Feature integrated in our starter kit
type Feature {
  # The ID of an object
  id: ID!

  # Name of the feature
  name: String

  # Description of the feature
  description: String

  # Url of the feature
  url: String
}

# A connection to a list of items.
type FeatureConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FeatureEdge]
}

# An edge in a connection.
type FeatureEdge {
  # The item at the end of the edge
  node: Feature

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addFeature(input: AddFeatureInput!): AddFeaturePayload
  addProduct(input: AddProductInput!): AddProductPayload
  updateProduct(input: UpdateProductInput!): UpdateProductPayload
  deleteProduct(input: DeleteProductInput!): DeleteProductPayload
  deleteCategory(input: DeleteCategoryInput!): DeleteCategoryPayload
  addCategory(input: AddCategoryInput!): AddCategoryPayload
  updateOrder(input: UpdateOrderInput!): UpdateOrderPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  addUser(input: AddUserInput!): AddUserPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Order which in queue
type Order implements Node {
  # The ID of an object
  id: ID!

  # Products, which user ordered
  products(after: String, first: Int, before: String, last: Int): OrderProductConnection

  # Users's username
  user: UserConnection
  website: String
  delivery_date: String
  address: String
  delivery_service: String
  payment: String
  status: String
  total_price: Float
  price: Float
  created_at: String
  updated_at: String
}

# A connection to a list of items.
type OrderConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OrderEdge]
}

# An edge in a connection.
type OrderEdge {
  # The item at the end of the edge
  node: Order

  # A cursor for use in pagination
  cursor: String!
}

# A connection to a list of items.
type OrderProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [OrderProductEdge]
}

# An edge in a connection.
type OrderProductEdge {
  # The item at the end of the edge
  node: OrderProducts

  # A cursor for use in pagination
  cursor: String!
}

# Order which in queue
type OrderProducts implements Node {
  # The ID of an object
  id: ID!
  product_id: Int

  # product object in db
  product(after: String, first: Int, before: String, last: Int): Product
  order_id: Int
  createdAt: String
  updatedAt: String
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Product 
type Product {
  # The ID of an object
  id: ID!

  # Name of the product
  name: String

  # Description of the pruduct
  price: Int

  # Date where product created
  created_at: String

  # Date where product updated
  updadet_at: String
}

# A connection to a list of items.
type ProductConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [ProductEdge]
}

# An edge in a connection.
type ProductEdge {
  # The item at the end of the edge
  node: Product

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
}

input UpdateOrderInput {
  delivery_date: String!
  address: Int!
  delivery_service: String!
  payment: String!
  status: String!
  clientMutationId: String
}

type UpdateOrderPayload {
  orderEdge: OrderEdge
  viewer: User
  clientMutationId: String
}

input UpdateProductInput {
  name: String!
  price: Int!
  created_at: String!
  updated_at: String!
  clientMutationId: String
}

type UpdateProductPayload {
  productEdge: ProductEdge
  viewer: User
  clientMutationId: String
}

input UpdateUserInput {
  name: String!
  age: Int!
  clientMutationId: String
}

type UpdateUserPayload {
  userEdge: UserEdge
  viewer: User
  clientMutationId: String
}

# A person who uses our app
type User implements Node {
  # The ID of an object
  id: ID!

  # Features that I have
  features(after: String, first: Int, before: String, last: Int): FeatureConnection

  # Array of products
  products(after: String, first: Int, before: String, last: Int): ProductConnection

  # List of users
  users(after: String, first: Int, before: String, last: Int): UsersConnection

  # Array of categories
  categories(after: String, first: Int, before: String, last: Int): CategoryConnection

  # Array of orders wich
  orders(after: String, first: Int, before: String, last: Int): OrderConnection

  # Array of visits for preset time interval
  visits(after: String, first: Int, before: String, last: Int): VisitConnection

  # Users's username
  username: String
  website: String
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: Users

  # A cursor for use in pagination
  cursor: String!
}

# Users which will be updated with admin
type Users implements Node {
  # The ID of an object
  id: ID!
  name: String
  age: Int
  email: String
}

# A connection to a list of items.
type UsersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UsersEdge]
}

# An edge in a connection.
type UsersEdge {
  # The item at the end of the edge
  node: Users

  # A cursor for use in pagination
  cursor: String!
}

# Visit object
type Visit {
  # The ID of an object
  id: ID!

  # Date of calendar
  created_at: String

  # Quantity of visits for this day
  user_id: Int
}

# A connection to a list of items.
type VisitConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [VisitEdge]
}

# An edge in a connection.
type VisitEdge {
  # The item at the end of the edge
  node: Visit

  # A cursor for use in pagination
  cursor: String!
}
